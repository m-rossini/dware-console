/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package br.com.auster.dware.console.customerType;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.Globals;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.actions.DispatchAction;

import br.com.auster.billcheckout.thresholds.CustomerType;
import br.com.auster.dware.console.commons.RequestScopeConstants;
import br.com.auster.dware.console.commons.SessionHelper;
import br.com.auster.dware.console.db.DBAccess;
import br.com.auster.dware.console.error.PortalRuntimeException;
import br.com.auster.facelift.services.ServiceLocator;
import br.com.auster.persistence.FetchCriteria;
import br.com.auster.web.indexing.utils.IndexingUtils;
import br.com.auster.web.utils.WebUtils;

/**
 * Creation date: 03-22-2007
 *
 */
public class CustomerTypeAction extends DispatchAction {

	private FetchCriteria fetch = new FetchCriteria();

	private static final String FORWARD_DISPLAYLIST = "list";
	private static final String FORWARD_DONE = "done";
	private static final String FORWARD_DETAIL = "detail";

	/**
	 *
	 * It responsible in list data do all CustomerType.
	 *
	 * @param mapping
	 * @param form
	 * @param _request
	 * @param response
	 * @return
	 * @see org.apache.struts.actions.DispatchAction#unspecified(org.apache.struts.action.ActionMapping, org.apache.struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
	 */
	public ActionForward unspecified(ActionMapping mapping, ActionForm form, HttpServletRequest _request, HttpServletResponse response) {

		List customerType = null;

		try {

			// defining paging information
			String pageId = (String) WebUtils.findRequestAttribute(_request, RequestScopeConstants.REQUEST_PAGEID_KEY);
			if (pageId == null) {
				pageId = "1";
			}
			String moveTo = (String) WebUtils.findRequestAttribute(_request, RequestScopeConstants.REQUEST_MOVETO_KEY);
			if (moveTo == null) {
				moveTo = "0";
			}
			// order field and orientation
			String orderBy = (String) WebUtils.findRequestAttribute(_request, RequestScopeConstants.REQUEST_ORDERBY_KEY);
			if ((orderBy == null) || (orderBy.trim().length() <= 0)) {
				orderBy = "customerType";
			}
			String orderWay = (String) WebUtils.findRequestAttribute(_request, RequestScopeConstants.REQUEST_ORDERWAY_KEY);
			if (orderWay == null) {
				orderWay = RequestScopeConstants.REQUEST_ORDERFORWARD_KEY;
			}

			int displayLength = 25;
			int pageNbr = IndexingUtils.getDisplayPageId(Integer.parseInt(pageId), Integer.parseInt(moveTo));
			int offset = IndexingUtils.getStartingElement(pageNbr, displayLength);
			fetch.clearOrder();
			fetch.setOffset(offset);
			fetch.setSize(displayLength);
			fetch.addOrder(orderBy, orderWay.equals(RequestScopeConstants.REQUEST_ORDERFORWARD_KEY));

			DBAccess db = new DBAccess(CustomerType.class);
			customerType = db.select(fetch);

			int totalPages = db.count();

			totalPages = IndexingUtils.getNumberOfPages(totalPages, displayLength);
			_request.setAttribute(RequestScopeConstants.REQUEST_PAGEID_KEY, String.valueOf(pageNbr));
			_request.setAttribute(RequestScopeConstants.REQUEST_TOTALPAGES_KEY, String.valueOf(totalPages));
			_request.setAttribute(RequestScopeConstants.REQUEST_ORDERBY_KEY, (orderBy == null ? "customerType" : orderBy) );
			_request.setAttribute(RequestScopeConstants.REQUEST_ORDERWAY_KEY, orderWay);

			_request.setAttribute(RequestScopeConstants.REQUEST_LISTOFCUSTOMERTYPE_KEY, customerType);
		} catch (Exception e) {
			ActionMessages messages = new ActionMessages();
			messages.add(Globals.MESSAGE_KEY, new ActionMessage("error.genericError", e));
			saveMessages(_request, messages);
			throw new PortalRuntimeException(e);
		}
		return mapping.findForward(FORWARD_DISPLAYLIST);
	}

	/**
	 *
	 * Is responsible in making delete a data of CustomerType.
	 *
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
		CustomerType customerType = null;
		ActionMessages messages = new ActionMessages();
		try {
			Object key = WebUtils.findRequestAttribute(request, RequestScopeConstants.REQUEST_CUSTOMERTYPE_ID_KEY);
			// recupera o id da web request do form
			long id = Long.parseLong((String) key);
			customerType = new CustomerType(); // Não funciona new CustomerType(id)
			customerType.setUid(id);

			DBAccess db = new DBAccess(CustomerType.class);
			customerType = (CustomerType) db.selectByPK(customerType);
			if (customerType != null) {
				db.delete(customerType);
			}

			request.setAttribute(RequestScopeConstants.REQUEST_OPERATION_DATA, RequestScopeConstants.REQUEST_OPERATION_TYPE_DELETE);
			request.setAttribute(RequestScopeConstants.REQUEST_CUSTOMERTYPE_ID_KEY, customerType);

			// auditing
			ServiceLocator.getInstance().getAuditService().audit("config.delete.ok", this.getClass().getPackage().getName(), SessionHelper.getUsername(request));

		} catch (Exception e) {
			// auditing
			ServiceLocator.getInstance().getAuditService().audit("config.delete.error", this.getClass().getPackage().getName(), SessionHelper.getUsername(request), e);
			// exception handling
			messages = new ActionMessages();
			messages.add(Globals.MESSAGE_KEY, new ActionMessage("error.genericError", e));
			saveMessages(request, messages);
			throw new PortalRuntimeException(e);
		}
		return mapping.findForward(FORWARD_DONE);
	}

	/**
	 *
	 * Is responsible in making insert data of Customer Type.
	 *
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward insert(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {

		CustomerType customerType = null;
		ActionMessages messages = new ActionMessages();
		try {
			DynaActionForm dyForm = (DynaActionForm) form;
			ActionErrors erros = dyForm.validate(mapping, request);
			customerType = getCustomerType(dyForm);

			DBAccess db = new DBAccess(CustomerType.class);
			db.save(customerType);
			request.setAttribute(RequestScopeConstants.REQUEST_CUSTOMERTYPE_ID_KEY, customerType);
			request.setAttribute(RequestScopeConstants.REQUEST_OPERATION_DATA, RequestScopeConstants.REQUEST_OPERATION_TYPE_INSERT);

			// auditing
			ServiceLocator.getInstance().getAuditService().audit("config.insert.ok", this.getClass().getPackage().getName(), SessionHelper.getUsername(request));
			return mapping.findForward(FORWARD_DONE);
		} catch (Exception e) {
			// auditing
			ServiceLocator.getInstance().getAuditService().audit("config.insert.error", this.getClass().getPackage().getName(), SessionHelper.getUsername(request), e);
			// exception handling
			messages.add(Globals.MESSAGE_KEY, new ActionMessage("error.genericError", e));
			saveMessages(request, messages);
			throw new PortalRuntimeException(e);
		}
	}

	/**
	 *
	 * responsible in catching the data of form and returning an object
	 * custormerType.
	 *
	 * @param dyForm
	 * @return CustomerType
	 */
	private CustomerType getCustomerType(DynaActionForm dyForm) {
		CustomerType customerType = new CustomerType();
		if (dyForm != null) {
			Object uidObj = null;
			Long uidLong = new Long(0);
			try {
				uidObj = dyForm.get("uid");
				if(uidObj != null){
					uidLong = (Long) uidObj;
					customerType.setUid(uidLong.longValue());
				}
				String customerCode = ((String) dyForm.get("customerType")).toUpperCase();
				String typeDescription = (String) dyForm.get("typeDescription");
				customerType.setCustomerType(customerCode);
				customerType.setTypeDescription(typeDescription);

			} catch (Exception e) {
				throw new PortalRuntimeException(e);
			}

		}
		return customerType;
	}

	/**
	 *
	 * Is responsible in showing detail os Customer Type.
	 *
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward detail(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
		CustomerType customerType = null;
		ActionMessages messages = new ActionMessages();
		try {
			Object key = WebUtils.findRequestAttribute(request, RequestScopeConstants.REQUEST_CUSTOMERTYPE_ID_KEY);
			// recupera o id da web request do form
			if (key != null && !key.equals("")) { // Update
				long id = Long.parseLong((String) key);
				customerType = new CustomerType(); // Não funciona new CustomerType(id);
				customerType.setUid(id);
				DBAccess db = new DBAccess(CustomerType.class);
				customerType = (CustomerType) db.selectByPK(customerType);
				request.setAttribute(RequestScopeConstants.REQUEST_OPERATION_DATA, RequestScopeConstants.REQUEST_OPERATION_TYPE_UPADTE);
			} else {
				customerType = new CustomerType();
				request.setAttribute(RequestScopeConstants.REQUEST_OPERATION_DATA, RequestScopeConstants.REQUEST_OPERATION_TYPE_INSERT);
			}
		} catch (Exception e) {
			messages.add(Globals.MESSAGE_KEY, new ActionMessage("error.genericError", e));
			saveMessages(request, messages);
			throw new PortalRuntimeException(e);
		}
		request.setAttribute(RequestScopeConstants.REQUEST_CUSTOMERTYPE_ID_KEY, customerType);
		return mapping.findForward(FORWARD_DETAIL);
	}

	/**
	 *
	 * Is responsible in making update of the data of Customer Type.
	 *
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
		CustomerType customerType = null;
		ActionMessages messages = new ActionMessages();

		try {
			DynaActionForm dyForm = (DynaActionForm) form;
			ActionErrors erros = dyForm.validate(mapping, request);
			customerType = getCustomerType(dyForm);

			DBAccess db = new DBAccess(CustomerType.class);
			db.update(customerType);
			request.setAttribute(RequestScopeConstants.REQUEST_OPERATION_DATA, RequestScopeConstants.REQUEST_OPERATION_TYPE_UPADTE);
			request.setAttribute(RequestScopeConstants.REQUEST_CUSTOMERTYPE_ID_KEY, customerType);

			// auditing
			ServiceLocator.getInstance().getAuditService().audit("config.update.ok", this.getClass().getPackage().getName(), SessionHelper.getUsername(request));
		} catch (Exception e) {
			// auditing
			ServiceLocator.getInstance().getAuditService().audit("config.update.error", this.getClass().getPackage().getName(), SessionHelper.getUsername(request), e);
			// exception handling
			messages.add(Globals.MESSAGE_KEY, new ActionMessage("error.genericError", e));
			saveMessages(request, messages);
			throw new PortalRuntimeException(e);
		}
		return mapping.findForward(FORWARD_DONE);
	}
}