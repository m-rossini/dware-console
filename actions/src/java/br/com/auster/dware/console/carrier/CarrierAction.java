/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package br.com.auster.dware.console.carrier;

import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.exception.ExceptionUtils;
import org.apache.log4j.Logger;
import org.apache.struts.Globals;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;

import br.com.auster.billcheckout.consequence.telco.CarrierDimension;
import br.com.auster.billcheckout.model.CarrierData;
import br.com.auster.dware.console.commons.RequestScopeConstants;
import br.com.auster.dware.console.commons.SessionHelper;
import br.com.auster.dware.console.error.PortalRuntimeException;
import br.com.auster.dware.console.hibernate.HibernateEnabledAction;
import br.com.auster.facelift.services.ServiceLocator;
import br.com.auster.persistence.FetchCriteria;
import br.com.auster.web.indexing.utils.IndexingUtils;
import br.com.auster.web.utils.WebUtils;

/**
 * Creation date: 03-22-2007
 *
 * XDoclet definition:
 * @struts.action path="/carrier" name="carrierForm" input="carrier/listCarrier.jsp" scope="request" validate="true"
 * @struts.action-forward name="success" path="/carrier/listCarrier.jsp"
 */
public class CarrierAction extends HibernateEnabledAction {

	private FetchCriteria fetch = new FetchCriteria();

	private static final String FORWARD_DISPLAYLIST = "success";
	private static final String FORWARD_DONE = "done";
	private static final String FORWARD_DETAIL = "detail";
	private static final String FORWARD_ERROR = "error";

	private static final Logger log = Logger.getLogger(CarrierAction.class);




	public ActionForward detail(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
		CarrierDimension carrierDimension = null;
		ExceptionUtils exceptionUtils = new ExceptionUtils();
		ActionMessages messages = new ActionMessages();
		Session session = null;
		try {
			String key = (String) WebUtils.findRequestAttribute(request, RequestScopeConstants.REQUEST_CARRIER_ID_KEY);
			log.debug("Detailing information for carrier uid " + key);
			session = this.openConnection();
			Criteria criteria = session.createCriteria(CarrierDimension.class);
			configureCriteria(criteria, null, new Long(key));
			carrierDimension = (CarrierDimension) criteria.uniqueResult();
			log.debug("Carrier dimension info found? " + (carrierDimension != null));
			criteria = session.createCriteria(CarrierData.class);
			criteria.add(Restrictions.like("carrierDimension", carrierDimension));
			List carriersDataList = criteria.list();

			if (carriersDataList != null && !carriersDataList.isEmpty()) {
				for (Iterator it = carriersDataList.iterator(); it.hasNext();) {
					CarrierData tmp = (CarrierData) it.next();
					tmp.setCarrierDimension(carrierDimension);
					if (tmp.isLocal()) {
						request.setAttribute(RequestScopeConstants.REQUEST_CARRIER_ID_KEY, tmp);
					} else {
						request.setAttribute(RequestScopeConstants.REQUEST_CARRIER_LD_ID_KEY, tmp);
					}
				}
			}
			// if no carrier was found, set an empty one
			if (request.getAttribute(RequestScopeConstants.REQUEST_CARRIER_ID_KEY) == null) {
				CarrierData tmp = new CarrierData();
				tmp.setCarrierDimension(carrierDimension);
				request.setAttribute(RequestScopeConstants.REQUEST_CARRIER_ID_KEY, tmp);
			}
			if (request.getAttribute(RequestScopeConstants.REQUEST_CARRIER_LD_ID_KEY) == null) {
				CarrierData tmp = new CarrierData();
				tmp.setCarrierDimension(carrierDimension);
				request.setAttribute(RequestScopeConstants.REQUEST_CARRIER_LD_ID_KEY, tmp);
			}
			// set operation
			request.setAttribute(RequestScopeConstants.REQUEST_OPERATION_DATA, RequestScopeConstants.REQUEST_OPERATION_TYPE_UPADTE);
		} catch (Exception e) {
			messages.add(Globals.MESSAGE_KEY, new ActionMessage("error.genericError", exceptionUtils.getThrowables(e)));
			saveMessages(request, messages);
			throw new PortalRuntimeException(e);
		} finally {
			if (session != null) {
				session.flush();
				session.close();
			}
		}
		return mapping.findForward(FORWARD_DETAIL);
	}

	/**
	 * Method unspecified
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward unspecified(ActionMapping mapping, ActionForm form, HttpServletRequest _request, HttpServletResponse response) {
			ExceptionUtils exceptionUtils = new ExceptionUtils();
			ActionMessages messages = new ActionMessages();
			Session session = null;

		try {
			// defining paging information
			String pageId = (String) WebUtils.findRequestAttribute(_request, RequestScopeConstants.REQUEST_PAGEID_KEY);
			if (pageId == null) { pageId = "1"; }
			String moveTo = (String) WebUtils.findRequestAttribute(_request, RequestScopeConstants.REQUEST_MOVETO_KEY);
			if (moveTo == null) { moveTo = "0"; }
			// order field and orientation
			String orderBy = (String) WebUtils.findRequestAttribute(_request, RequestScopeConstants.REQUEST_ORDERBY_KEY);
			if ((orderBy == null) || (orderBy.trim().length() <= 0)) { orderBy = "carrierState"; }
			String orderWay = (String) WebUtils.findRequestAttribute(_request, RequestScopeConstants.REQUEST_ORDERWAY_KEY);
			if (orderWay == null) { orderWay = RequestScopeConstants.REQUEST_ORDERFORWARD_KEY; }
			// Filter
			String filterType = (String) WebUtils.findRequestAttribute(_request, RequestScopeConstants.REQUEST_FILTERBY_KEY);
			String filterCondition = (String) WebUtils.findRequestAttribute(_request, RequestScopeConstants.REQUEST_FILTERCONDITION_KEY);
			// debugging these parameters
			log.debug("pageId is " + pageId);
			log.debug("moveTo is " + moveTo);
			log.debug("orderBy is " + orderBy);
			log.debug("orderWay is " + orderWay);
			log.debug("filterType is " + filterType);
			log.debug("filterCondition is" + filterCondition);
			// preparing to load information
			int displayLength = 25;
			int pageNbr = IndexingUtils.getDisplayPageId(Integer.parseInt(pageId), Integer.parseInt(moveTo));
			int offset = IndexingUtils.getStartingElement(pageNbr, displayLength);
			fetch.clearOrder();
			fetch.setOffset(offset);
			fetch.setSize(displayLength);
			fetch.addOrder(orderBy, orderWay.equals(RequestScopeConstants.REQUEST_ORDERFORWARD_KEY));
			log.debug("offset is " + offset);
			log.debug("fetchSize is " + displayLength);
			// loading data
			session = this.openConnection();
			Criteria criteria = session.createCriteria(CarrierDimension.class);
			if ((filterType != null && filterType.trim().length() > 0) && (filterCondition != null && filterCondition.trim().length() > 0)) {
				criteria.add(Restrictions.ilike(filterType, "%"+filterCondition+"%"));
			}
			int totalPages = criteria.list().size();
			configureCriteria(criteria, fetch);
			List results = criteria.list();
			log.debug("loaded " + results.size() + " out of " + totalPages + " elements for CarrierDimension.class");
			// setting info into request
			totalPages = IndexingUtils.getNumberOfPages(totalPages, displayLength);

			totalPages = IndexingUtils.getNumberOfPages(totalPages, displayLength);
			_request.setAttribute(RequestScopeConstants.REQUEST_PAGEID_KEY, String.valueOf(pageNbr));
			_request.setAttribute(RequestScopeConstants.REQUEST_TOTALPAGES_KEY, String.valueOf(totalPages));
			_request.setAttribute(RequestScopeConstants.REQUEST_ORDERBY_KEY, (orderBy == null ? "carrierState" : orderBy) );
			_request.setAttribute(RequestScopeConstants.REQUEST_ORDERWAY_KEY, orderWay);
			_request.setAttribute(RequestScopeConstants.REQUEST_FILTERBY_KEY, (filterType == null ? "" : filterType) );
			_request.setAttribute(RequestScopeConstants.REQUEST_FILTERCONDITION_KEY, (filterCondition == null? "" : filterCondition) );

			_request.setAttribute(RequestScopeConstants.REQUEST_LISTOFCARRIERS_KEY, results);

			return mapping.findForward(FORWARD_DISPLAYLIST);

		} catch (Exception e) {
			messages.add(Globals.MESSAGE_KEY, new ActionMessage("error.genericError", exceptionUtils.getThrowables(e)));
			saveMessages(_request, messages);
			throw new PortalRuntimeException(e);
		} finally {
			if (session != null) {
				session.flush();
				session.close();
			}
		}
	}

	/**
	 * Is responsible in
	 * <p>Example:
	 * <pre>
	 * To create a use example.
	 * </pre>
	 * </p>
	 *
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
		CarrierDimension carrierDimension = null;
		ExceptionUtils exceptionUtils = new ExceptionUtils();
		ActionMessages messages = new ActionMessages();
		Session session = null;

		try {
			Object key = WebUtils.findRequestAttribute(request, RequestScopeConstants.REQUEST_CARRIER_ID_KEY);
			// recupera o id da web request do form
			Long id = Long.valueOf((String) key);
			log.debug("Removing address for carrier dimension uid " + id);

			carrierDimension = new CarrierDimension(id.longValue());

			session = this.openConnection();
			Criteria criteria = session.createCriteria(CarrierData.class);
			criteria.add(Restrictions.like("carrierDimension", carrierDimension));
			CarrierData carrierData = (CarrierData) criteria.list().get(0);

			if (carrierData != null) {
				session.delete(carrierData);
				log.debug("Carrier address removed");
			} else {
				log.debug("No address found to remove");
			}
			criteria = session.createCriteria(CarrierDimension.class);
			configureCriteria(criteria, null, new Long(carrierDimension.getUid()));
			carrierDimension = (CarrierDimension) criteria.uniqueResult();
			request.setAttribute(RequestScopeConstants.REQUEST_OPERATION_DATA, RequestScopeConstants.REQUEST_OPERATION_TYPE_DELETE);
			request.setAttribute(RequestScopeConstants.REQUEST_CARRIER_ID_KEY, carrierDimension);
			// auditing
			ServiceLocator.getInstance().getAuditService().audit("config.delete.ok", this.getClass().getPackage().getName(), SessionHelper.getUsername(request));
		} catch (Exception e) {
			// auditing
			ServiceLocator.getInstance().getAuditService().audit("config.delete.error", this.getClass().getPackage().getName(), SessionHelper.getUsername(request), e);
			// exception
			messages.add(Globals.MESSAGE_KEY, new ActionMessage("error.genericError", exceptionUtils.getThrowables(e)));
			saveMessages(request, messages);
			throw new PortalRuntimeException(e);
		} finally {
			if (session != null) {
				session.flush();
				session.close();
			}
		}
		return mapping.findForward(FORWARD_DONE);
	}

	/**
	 *
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward insert(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {

		ExceptionUtils exceptionUtils = new ExceptionUtils();
		ActionMessages messages = new ActionMessages();
		try {
			CarrierDimension carrierDimension = new CarrierDimension();
			CarrierData carrierData = new CarrierData();
			carrierData.setCarrierDimension(carrierDimension);
			request.setAttribute(RequestScopeConstants.REQUEST_OPERATION_DATA, RequestScopeConstants.REQUEST_OPERATION_TYPE_INSERT);
			request.setAttribute(RequestScopeConstants.REQUEST_CARRIER_ID_KEY, carrierData);
			request.setAttribute(RequestScopeConstants.REQUEST_CARRIER_LD_ID_KEY, carrierData);
		} catch (Exception e) {
			messages.add(Globals.MESSAGE_KEY, new ActionMessage("error.genericError", exceptionUtils.getThrowables(e)));
			saveMessages(request, messages);
			throw new PortalRuntimeException(e);
		}

		return mapping.findForward(FORWARD_DETAIL);
	}
}