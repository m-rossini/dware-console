/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package br.com.auster.dware.console.occThresholds;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.exception.ExceptionUtils;
import org.apache.struts.Globals;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.actions.DispatchAction;

import br.com.auster.billcheckout.consequence.telco.CarrierDimension;
import br.com.auster.billcheckout.thresholds.OCCThreshold;
import br.com.auster.dware.console.commons.MultiFieldComparator;
import br.com.auster.dware.console.commons.RequestScopeConstants;
import br.com.auster.dware.console.commons.SessionHelper;
import br.com.auster.dware.console.db.DBAccess;
import br.com.auster.dware.console.error.PortalRuntimeException;
import br.com.auster.facelift.services.ServiceLocator;
import br.com.auster.persistence.FetchCriteria;
import br.com.auster.web.indexing.utils.IndexingUtils;
import br.com.auster.web.utils.WebUtils;

/**
 * Creation date: 03-22-2007
 *
 * XDoclet definition:
 *
 * @struts.action path="/carrier" name="carrierForm"
 *                input="carrier/listCarrier.jsp" scope="request"
 *                validate="true"
 * @struts.action-forward name="success" path="/carrier/listCarrier.jsp"
 */
public class OCCThresholdAction extends DispatchAction {

	private FetchCriteria fetch = new FetchCriteria();
	private static final String FORWARD_DISPLAYLIST = "success";
	private static final String FORWARD_DONE = "done";
	private static final String FORWARD_DETAIL = "detail";



	/**
	 * Handles displaying the details from a OCCThreshold.
	 *
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward detail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		OCCThreshold threshold = null;
		CarrierDimension carrierDimension = new CarrierDimension();
		ActionMessages messages = new ActionMessages();

		try {
			Object key = WebUtils.findRequestAttribute(request, RequestScopeConstants.REQUEST_OCCTHRESHOLDS_ID_KEY);
			if (key != null && !key.equals("")) {
				long id = Long.parseLong((String) key);
				threshold = new OCCThreshold();
				threshold.setUid(id);
				DBAccess db = new DBAccess(OCCThreshold.class);
				threshold = (OCCThreshold) db.selectByPK(threshold);
				// Search customer type
				Collection carriersList = new ArrayList();
				carriersList.add(threshold.getCarrier());

				log.debug("Carrier LIST =======> " + ToStringBuilder.reflectionToString(carriersList));
				request.setAttribute(RequestScopeConstants.REQUEST_LISTOFCARRIERS_KEY, carriersList);
				request.setAttribute(RequestScopeConstants.REQUEST_CARRIER_ID_KEY, carrierDimension);
				request.setAttribute(RequestScopeConstants.REQUEST_OPERATION_DATA, RequestScopeConstants.REQUEST_OPERATION_TYPE_UPADTE);
			} else {
				threshold = new OCCThreshold();
				//

				DBAccess db = new DBAccess(CarrierDimension.class);
				// Searche de Customer Types
				Collection carriersList = db.selectAll();
				request.setAttribute(RequestScopeConstants.REQUEST_LISTOFCARRIERS_KEY, carriersList);
				request.setAttribute(RequestScopeConstants.REQUEST_CARRIER_ID_KEY, carrierDimension);
				request.setAttribute(RequestScopeConstants.REQUEST_OPERATION_DATA, RequestScopeConstants.REQUEST_OPERATION_TYPE_INSERT);
			}
			request.setAttribute(RequestScopeConstants.REQUEST_OCCTHRESHOLDS_ID_KEY, threshold);
			if (threshold != null) {
				long occUid = threshold.getUid();
				String ctUid = String.valueOf(occUid);
				request.setAttribute(RequestScopeConstants.REQUEST_CARRIER_ID_KEY, ctUid);
			}

		} catch (Exception e) {

			 messages.add(Globals.MESSAGE_KEY, new
			 ActionMessage("br.com.auster.dware.console.occThresholds.listOccDetailException"));
			 saveMessages(request, messages);

			 throw new PortalRuntimeException(e);
		}
		return mapping.findForward(FORWARD_DETAIL);
	}

	/**
	 * Used to list all OCCThreshold.
	 *
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward unspecified(ActionMapping mapping, ActionForm form, HttpServletRequest _request, HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		ExceptionUtils exceptionUtils = new ExceptionUtils();

		try {
			DBAccess db = new DBAccess(OCCThreshold.class);
			List thresholds = null;

			int displayLength = 0;
			String displayLengthStr = null;

			Object displayLengthObj = WebUtils.findRequestAttribute(_request, RequestScopeConstants.REQUEST_DISPLAYLEN_KEY);
			displayLengthStr = (String) displayLengthObj;
			//
			if (StringUtils.isEmpty(displayLengthStr)) {
				displayLength = 25;
				displayLengthStr = Integer.toString(displayLength);
			} else {
				displayLength = Integer.parseInt(displayLengthStr);
			}

			// defining paging information
			String pageId = (String) WebUtils.findRequestAttribute(_request, RequestScopeConstants.REQUEST_PAGEID_KEY);
			if (pageId == null) {
				pageId = "1";
			}
			String moveTo = (String) WebUtils.findRequestAttribute(_request, RequestScopeConstants.REQUEST_MOVETO_KEY);
			if (moveTo == null) {
				moveTo = "0";
			}
			// order field and orientation
			String orderBy = (String) WebUtils.findRequestAttribute(_request, RequestScopeConstants.REQUEST_ORDERBY_KEY);
			if ((orderBy == null) || (orderBy.trim().length() <= 0)) {
				orderBy = "upperAmount";
			}
			String orderWay = (String) WebUtils.findRequestAttribute(_request, RequestScopeConstants.REQUEST_ORDERWAY_KEY);
			if (orderWay == null) {
				orderWay = RequestScopeConstants.REQUEST_ORDERFORWARD_KEY;
			}

			int pageNbr = IndexingUtils.getDisplayPageId(Integer.parseInt(pageId), Integer.parseInt(moveTo));
			int offset = IndexingUtils.getStartingElement(pageNbr, displayLength);
			fetch.clearOrder();
			fetch.setOffset(offset);
			fetch.setSize(displayLength);
			fetch.addOrder(orderBy, orderWay.equals(RequestScopeConstants.REQUEST_ORDERFORWARD_KEY));

			log.debug("unspecified ==> Create List ");
			thresholds = db.select(fetch);

			log.debug("unspecified ==> totalPages ");
			int totalPages = db.count();

			String orderByProperties = (orderBy.equals("upperAmount") ? "upperAmount" : "upperAmount");
			MultiFieldComparator mfc = new MultiFieldComparator( new String[] { orderByProperties });
			if (orderWay.equals(RequestScopeConstants.REQUEST_ORDERFORWARD_KEY)) {
				mfc.setAscendingOrder();
			} else {
				mfc.setDescendingOrder();
			}
			Collections.sort(thresholds, mfc);

			totalPages = IndexingUtils.getNumberOfPages(totalPages,displayLength);
			_request.setAttribute(RequestScopeConstants.REQUEST_PAGEID_KEY, String.valueOf(pageNbr));
			_request.setAttribute(RequestScopeConstants.REQUEST_TOTALPAGES_KEY, String.valueOf(totalPages));
			_request.setAttribute(RequestScopeConstants.REQUEST_ORDERBY_KEY,(orderBy == null ? "upperAmount" : orderBy));
			_request.setAttribute(RequestScopeConstants.REQUEST_ORDERWAY_KEY, orderWay);
			_request.setAttribute(RequestScopeConstants.REQUEST_DISPLAYLEN_KEY,displayLengthStr);

			_request.setAttribute(RequestScopeConstants.REQUEST_LISTOFOCCTHRESHOLDS_KEY,thresholds);
			_request.setAttribute(RequestScopeConstants.REQUEST_OCCTHRESHOLDS_ID_KEY,new OCCThreshold());

			return mapping.findForward(FORWARD_DISPLAYLIST);
			//}
		} catch (Exception e) {
			messages.add(Globals.MESSAGE_KEY, new ActionMessage("error.genericError", exceptionUtils.getThrowables(e)));
			saveMessages(_request, messages);
			throw new PortalRuntimeException(e);
		}
	}

	/**
	 * Handles when a OCCThreshold has to be removed.
	 *
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest _request, HttpServletResponse response) {
		OCCThreshold threshold = null;
		ActionMessages messages = new ActionMessages();
		ExceptionUtils exceptionUtils = new ExceptionUtils();

		try {
			Object key = WebUtils.findRequestAttribute(_request, RequestScopeConstants.REQUEST_OCCTHRESHOLDS_ID_KEY);
			Long id = Long.valueOf((String) key);
			threshold = new OCCThreshold();
			threshold.setUid(id.longValue());

			DBAccess db = new DBAccess(OCCThreshold.class);
			threshold = (OCCThreshold) db.selectByPK(threshold);

			if (threshold != null) {
				db.delete(threshold);
			}
			_request.setAttribute(RequestScopeConstants.REQUEST_OPERATION_DATA, RequestScopeConstants.REQUEST_OPERATION_TYPE_DELETE);
			_request.setAttribute(RequestScopeConstants.REQUEST_OCCTHRESHOLDS_ID_KEY, threshold);

			// auditing
			ServiceLocator.getInstance().getAuditService().audit("config.delete.ok", this.getClass().getPackage().getName(), SessionHelper.getUsername(_request));
		} catch (Exception e) {
			// auditing
			ServiceLocator.getInstance().getAuditService().audit("config.delete.error", this.getClass().getPackage().getName(), SessionHelper.getUsername(_request), e);
			// handling exception
			messages.add(Globals.MESSAGE_KEY, new ActionMessage("error.genericError", exceptionUtils.getThrowables(e)));
			saveMessages(_request, messages);
			throw new PortalRuntimeException(e);
		}
		return mapping.findForward(FORWARD_DONE);
	}

	/**
	 * Handles when adding a new OCCThreshold.
	 *
	 * @param mapping
	 * @param form
	 * @param _request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward insert(ActionMapping mapping, ActionForm form, HttpServletRequest _request, HttpServletResponse response) {

		OCCThreshold threshold = new OCCThreshold();
		ActionMessages messages = new ActionMessages();
		ExceptionUtils exceptionUtils = new ExceptionUtils();

		try {

			threshold = getOcc(form, _request);

			DBAccess db = new DBAccess(OCCThreshold.class);
			db.save(threshold);

			_request.setAttribute(RequestScopeConstants.REQUEST_OPERATION_DATA, RequestScopeConstants.REQUEST_OPERATION_TYPE_INSERT);
			_request.setAttribute(RequestScopeConstants.REQUEST_OCCTHRESHOLDS_ID_KEY, threshold);
			// auditing
			ServiceLocator.getInstance().getAuditService().audit("config.insert.ok", this.getClass().getPackage().getName(), SessionHelper.getUsername(_request));

		} catch (Exception e) {
			// auditing
			ServiceLocator.getInstance().getAuditService().audit("config.insert.error", this.getClass().getPackage().getName(), SessionHelper.getUsername(_request), e);
			// exception handling
			messages.add(Globals.MESSAGE_KEY, new ActionMessage("error.genericError", exceptionUtils.getThrowables(e)));
			saveMessages(_request, messages);
			throw new PortalRuntimeException(e);
		}
		return mapping.findForward(FORWARD_DONE);
	}

	/**
	 * Executes the update operation of the selected OCCThreshold.
	 *
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {

		OCCThreshold threshold = new OCCThreshold();
		ActionMessages messages = new ActionMessages();
		ExceptionUtils exceptionUtils = new ExceptionUtils();

		try {
			threshold = getOcc(form, request);

			DBAccess db = new DBAccess(OCCThreshold.class);
			db.update(threshold);
			request.setAttribute(RequestScopeConstants.REQUEST_OPERATION_DATA, RequestScopeConstants.REQUEST_OPERATION_TYPE_UPADTE);
			request.setAttribute(RequestScopeConstants.REQUEST_OCCTHRESHOLDS_ID_KEY, threshold);
			// auditing
			ServiceLocator.getInstance().getAuditService().audit("config.update.ok", this.getClass().getPackage().getName(), SessionHelper.getUsername(request));
		} catch (Exception e) {
			// auditing
			ServiceLocator.getInstance().getAuditService().audit("config.update.error", this.getClass().getPackage().getName(), SessionHelper.getUsername(request), e);
			// exception handling
			messages.add(Globals.MESSAGE_KEY, new ActionMessage("error.genericError", exceptionUtils.getThrowables(e)));
			saveMessages(request, messages);
			throw new PortalRuntimeException(e);
		}
		return mapping.findForward(FORWARD_DONE);
	}
	/**
	 * Helper methods
	 *
	 * @param form
	 * @return
	 * @throws Exception
	 */
	protected OCCThreshold getOcc(ActionForm form, HttpServletRequest request) throws Exception {
		OCCThreshold threshold = new OCCThreshold();
		DynaActionForm dyForm = (DynaActionForm) form;
		CarrierDimension carrierDimension = null;

		try {
			String message = ((String) dyForm.get("message") != null ? (String)dyForm.get("message"): "");
			log.debug("hintMessage form =======> " + dyForm.get("message"));
			Double upperAmount = dyForm.get("upperAmount").equals("") ?  new Double(OCCThreshold.DISABLED_LIMIT) : new Double((String)dyForm.get("upperAmount")) ;
			log.debug("upperAmount form =======> " + dyForm.get("upperAmount"));
			Double lowerAmount = dyForm.get("lowerAmount").equals("") ?  new Double(OCCThreshold.DISABLED_LIMIT) : new Double((String) dyForm.get("lowerAmount"));
			log.debug("lowerAmount form =======> " + dyForm.get("lowerAmount"));
			Long carrier = (Long) dyForm.get("carrier");

			Object key = WebUtils.findRequestAttribute(request, RequestScopeConstants.REQUEST_OCCTHRESHOLDS_ID_KEY);

			if (key != null && !key.equals("")) { // Update
				long id = Long.parseLong((String) key);
				// CycleDates(id);
				threshold.setUid(id);
				DBAccess db = new DBAccess(OCCThreshold.class);
				threshold = (OCCThreshold) db.selectByPK(threshold);
			} else {
				//
				DBAccess db = new DBAccess(CarrierDimension.class);
				carrierDimension = new CarrierDimension();
				carrierDimension.setUid(carrier.longValue());
				//
				carrierDimension = (CarrierDimension) db.selectByPK(carrierDimension);
				log.debug("Carrier =======> " + ToStringBuilder.reflectionToString(carrierDimension));
				threshold.setCarrier(carrierDimension);

			}
			threshold.setHintMessage(message);
			threshold.setUpperAmount(upperAmount.doubleValue());
			threshold.setLowerAmount(lowerAmount.doubleValue());
			log.debug("message =======> " + message);
			log.debug("upperAmount =======> " + upperAmount.doubleValue());
			log.debug("lowerAmount =======> " + lowerAmount.doubleValue());
			log.debug("carrier =======> " + carrier.longValue());

		} catch (Exception e) {
			throw e;
		}
		return threshold;
	}

}